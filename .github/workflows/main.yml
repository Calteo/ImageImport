#
# Build the ImageImport and publish 
#

name: Image Import

on:
  push:
    branches: [ "main" ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  BUILD_VERSION: "1.0.${{ github.run_number }}"
  CHOCOLATELY_NUSPEC: "chocolateley\\image-import.nuspec"  
  BINARY_PACKAGE: "Image-Import-Binary.1.0.${{ github.run_number }}.zip"
  CHOCOLATELY_PACKAGE: "Image-Import.1.0.${{ github.run_number }}.nupkg"

jobs:
    
  build:
    name: Build
    runs-on: windows-latest    

    steps:
    # - name: List env
    #  run: env
      
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Install DocFX
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install docfx


    # Install the .NET Core workload
    - name: Install .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    # - name: Echo Version 
    #  run: echo "Version = ${{ env.BUILD_VERSION }}"
    
    - name: Version Visual Studio SDK projects
      uses: roryprimrose/set-vs-sdk-project-version@v1.0.3
      with:
        version: "${{ env.BUILD_VERSION }}.0"
        assemblyVersion: "${{ env.BUILD_VERSION }}.0"
        fileVersion: "${{ env.BUILD_VERSION }}.0"
        informationalVersion: "${{ env.BUILD_VERSION }}.0"
    
    # Compile the solution
    - name: Compile solution
      run: dotnet build src\ImageImport.sln -c Release -o output
   
    # Documentation
    - name: Build Documentation
      working-directory: docfx_project
      run: docfx docfx.json
      continue-on-error: false

    - name: Remove unnecessary files
      run: del output\*.pdb,output\*.dev.json,output\*.deps.json 

    - name: Zip Binaries
      uses: TheDoctor0/zip-release@0.6.2
      with:
        directory: output
        filename: '..\${{ env.BINARY_PACKAGE }}'
        type: 'zip'

    - name: Patch chocolately package
      run: |         
        $xml = [xml](Get-Content ${{ env.CHOCOLATELY_NUSPEC }})
        $xml.DocumentElement.metadata.version = "${{ env.BUILD_VERSION }}"
        $xml.Save("${{ env.CHOCOLATELY_NUSPEC }}")
        copy ${{ env.BINARY_PACKAGE }} chocolateley\tools\package.zip
        ls chocolateley\tools
        $hash = Get-FileHash ${{ env.BINARY_PACKAGE }}
        $hash.Path = "package.zip"
        $hash | Format-List -Property Path,Hash,Algorithm >> chocolateley\tools\VERIFICATION.txt

    - name: Create chocolately package
      uses: crazy-max/ghaction-chocolatey@v2
      with:
         args: pack ${{ env.CHOCOLATELY_NUSPEC }}        

    # create github release
    - name: Create Release
      uses: softprops/action-gh-release@v1        
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: Release ${{ env.BUILD_VERSION }}
        tag_name: ${{ env.BUILD_VERSION }}
        files: |
          ${{ env.BINARY_PACKAGE }}
          ${{ env.CHOCOLATELY_PACKAGE }}

    - name: Push package to chocolately     
      if: false
      uses: crazy-max/ghaction-chocolatey@v2
      with:
        args: push $${ env.CHOCOLATELY_PACKAGE }} --source https://push.chocolatey.org/ --api-key ${{ secrets.CHOCOLATELY_TOKEN }}

    # publish documentation
    - name: Publish documentation
      if: github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docfx_project/docs
        force_orphan: true
